// Challenge 10: Minimum Spanning Tree

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

// Main Execution

int main(int argc, char *argv[]) {
  int nvertices, min, min_index;
  bool flag = true; //control end of loop

  cin >> nvertices;
  while(flag){
		int matrix[nvertices][nvertices];
    for(int r = 0; r < nvertices; r++){
      for(int c = 0; c < nvertices; c++){
        cin >> matrix[r][c]; //input data into a adj. matrix
      }
    }

	int MST[nvertices]; //hold path of MST
	int values[nvertices]; //weights
	bool found[nvertices]; //if it has been searched

	for(int i = 0; i < nvertices; i++){ //initialize all values
		values[i] = 1000;
		found[i] = false;
	}
	values[0] = 0;
	MST[0] = -1;

	for(int c = 0; c < nvertices - 1; c++){

		min = 10000; //set min very large so it can be replaced
		for(int i = 0; i < nvertices; i++){
			if (found[i] == false && values[i] < min){ //find min and track index
				min = values[i];
				min_index = i;
			}
		}

		found[min_index] = true; //mark it as found
		for(int i = 0; i < nvertices; i++){
			if(matrix[min_index][i] != -1 && found[i] == false && matrix[min_index][i] <  values[i]){ //loop to search for MST - skip if vertice doesnt exist
						 MST[i]  = min_index;
						 values[i] = matrix[min_index][i];
      }
		}
	}

	int sum = 0; // track sum
	for(size_t i = 1; i < sizeof(MST)/sizeof(MST[0]); i++){
		sum += matrix[i][MST[i]];
	}

  cout << sum << endl; //sum of weights

  vector<string> ordered;
  string temp;
  for(int i = 1; i < nvertices; i++){
    char first = MST[i] + 'A'; //change numbers to letters of vertices
    char second = 'A' + i;

    if(first < second){ //sort each letter in proper order and add to string
      temp.push_back(first);
      temp.push_back(second);
      ordered.push_back(temp);
      temp.erase();
    }
    else{
      temp.push_back(second);
      temp.push_back(first);
      ordered.push_back(temp);
      temp.erase();
    }
  }

  sort(ordered.begin(), ordered.end()); //sort vector of strings to get ordered vertices
  for(auto it = ordered.begin(); it != ordered.end(); it++){
    cout << *it << endl; //print
  }

  if(cin >> nvertices) //check flags
    cout << endl;
  else
    flag = false;
}
  return EXIT_SUCCESS;
}

// vim: set sts=4 sw=4 ts=8 expandtab ft=cpp:
