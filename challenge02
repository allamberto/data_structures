// Challenge 02: Adding List-Based Integers
//Ana Luisa Lamberto - Class Example Code Used

#include <cstdlib>
#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

// List declaration ------------------------------------------------------------

template <typename T>
class List {
    protected:
        struct Node {
            T     data;
            Node *next;
        };

        typedef Node * iterator;

        Node  *head;    // Head pointer
        Node  *tail;    // Tail pointer
        size_t length;

    public:
        List() : head(nullptr), tail(nullptr), length(0) {}

        ~List();                          // Destructor
        List(const List<T> &other);         // Copy Constructor
        List<T>& operator=(List<T> other);      // Assignment Operator
        void swap(List<T> &other);          // Utility

        int size() const { return length; } //return size
        T& at(const size_t i); //return data at a iterator
        void push_back(const T &data); //add data to back of list
        void erase(iterator it); //erase a data at a iterator
        void print(); //print list
        void eraseList(); //erase entire list
};

// List implementation --------------------------------------------------------

// Post-condition: Clears all nodes from list - Deconstructor
template <typename T>
List<T>::~List() {
    Node *next = nullptr;

    for (Node *curr = head; curr != nullptr; curr = next) {
        next = curr->next;
        delete curr;
    }
}

// Post-condition: Copies all nodes from other - Constructor
template <typename T>
List<T>::List(const List<T> &other)
    : head(nullptr), tail(nullptr), length(0) {
    for (Node *curr = other.head; curr != nullptr; curr = curr->next) {
        push_back(curr->data);
    }
}

// Post-condition: Clears existing list and copies all nodes from other - Assignment Operator
template <typename T>
List<T>& List<T>::operator=(List<T> other) {
    swap(other);
    return *this;
}

//Swap Function - for assignment operator
template <typename T>
void List<T>::swap(List<T> &other) {
    std::swap(head, other.head);
    std::swap(tail, other.tail);
    std::swap(length, other.length);
}

//At Function -  return data at an iterator
template <typename T>
T& List<T>::at(const size_t i) {
    Node *node = head;
    size_t   n = 0;

    while (n < i && node != nullptr) {
        node = node->next;
        n++;
    }
    if (node) {
        return node->data;
    }
    else {
        throw std::out_of_range("invalid list index");
    }
}

//Push_Back Function - adds node to end of list
template <typename T>
void List<T>::push_back(const T& data) { //add data to end of list
    if (head == nullptr) {
        head = new Node{data, nullptr};
        tail = head;
    }
    else {
         tail->next = new Node{data, nullptr};
         tail = tail->next;
    }
    length++;
}

//Erase Function - erase node at an iterator
template <typename T>
void List<T>::erase(iterator it) {
    if (it == nullptr) {
         throw std::out_of_range("invalid iterator");
    }
    if (head == it) {
         head = head->next;
         delete it;

       if (it == tail) {
            tail = nullptr;     // Update tail
          }

    }
    else {
         Node *node = head;

         while (node != nullptr && node->next != it) {
            node = node->next;
         }

         if (node == nullptr) {
            throw std::out_of_range("invalid iterator");
         }

         node->next = it->next;
         delete it;

       if (it == tail) {
            tail = node;
       }
    }

    length--;
}
//print function - prints list in reverse
template <typename T>
void List<T>::print(){ //print number in correct order
  for (int i = size() - 1; i >= 0; i--){ //interate backwards through list
    cout << at(i);
  }
  cout << endl;
}

//EraseList Function - erases entire list
template <typename T>
void List<T>::eraseList(){
  for (Node *curr = head; curr != nullptr; curr = curr->next){ //loop through list and erase at every interation
    erase(curr);
  }
}


// Main Execution --------------------------------------------------------------

int main(int argc, char *argv[]) {

    string integer1, integer2;
    List<int> int1, int2, result;
    while(cin >> integer1 >> integer2){ //loop while two numbers are being entered as input
      for(int i = integer1.length() - 1; i >= 0; i--){ //for every char character in num1
         int1.push_back(integer1[i] - 48); //subtract 48 to get a numeric value from 1 - 9
      }

      for(int i = integer2.length() - 1; i >= 0; i--){ //for every char character in num2
         int2.push_back(integer2[i] - 48);
      }

      int push;
      if(int1.size() > int2.size()){ //first number is bigger or equal to second
        push = int1.size() - int2.size(); //find difference
        for(int i = 0; i < push; i++) //add zeros to end of smaller number
          int2.push_back(0);
      }
      else{ //second number is bigger than first
        push = int2.size() - int1.size();
        for(int i = 0; i < push; i++)
          int1.push_back(0);
      }
int num, count = 0, carry = 0;
    while((count < int1.size() - 1) && (count < int2.size() - 1)){ //loop until both integers are a digit away from the end
      num = carry + int1.at(count) + int2.at(count); //add numbers together and account for carry
      if(num > 9){ //if greater than nine
        carry = 1; //account for carry
        result.push_back(num - 10); //add number to results list
      }
      else{
        carry = 0;
        result.push_back(num);
      }
      count++;
    }

    result.push_back(carry + int1.at(count) + int2.at(count)); //account for final carry by adding the final addition to the list even if it's over nine

    result.print();

    //reset all values for next calculation
    carry = 0;
    result.eraseList();
    int1.eraseList();
    int2.eraseList();
    }

    return 0;
}
